// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tmc/langchaingo/vectorstores (interfaces: VectorStore)
//
// Generated by this command:
//
//	mockgen -destination=pkg/test/mock/vectorstores/mock_vectorstore.go github.com/tmc/langchaingo/vectorstores VectorStore
//

// Package mock_vectorstores is a generated GoMock package.
package mock_vectorstores

import (
	context "context"
	reflect "reflect"

	schema "github.com/tmc/langchaingo/schema"
	vectorstores "github.com/tmc/langchaingo/vectorstores"
	gomock "go.uber.org/mock/gomock"
)

// MockVectorStore is a mock of VectorStore interface.
type MockVectorStore struct {
	ctrl     *gomock.Controller
	recorder *MockVectorStoreMockRecorder
}

// MockVectorStoreMockRecorder is the mock recorder for MockVectorStore.
type MockVectorStoreMockRecorder struct {
	mock *MockVectorStore
}

// NewMockVectorStore creates a new mock instance.
func NewMockVectorStore(ctrl *gomock.Controller) *MockVectorStore {
	mock := &MockVectorStore{ctrl: ctrl}
	mock.recorder = &MockVectorStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVectorStore) EXPECT() *MockVectorStoreMockRecorder {
	return m.recorder
}

// AddDocuments mocks base method.
func (m *MockVectorStore) AddDocuments(arg0 context.Context, arg1 []schema.Document, arg2 ...vectorstores.Option) ([]string, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddDocuments", varargs...)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocuments indicates an expected call of AddDocuments.
func (mr *MockVectorStoreMockRecorder) AddDocuments(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocuments", reflect.TypeOf((*MockVectorStore)(nil).AddDocuments), varargs...)
}

// SimilaritySearch mocks base method.
func (m *MockVectorStore) SimilaritySearch(arg0 context.Context, arg1 string, arg2 int, arg3 ...vectorstores.Option) ([]schema.Document, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SimilaritySearch", varargs...)
	ret0, _ := ret[0].([]schema.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SimilaritySearch indicates an expected call of SimilaritySearch.
func (mr *MockVectorStoreMockRecorder) SimilaritySearch(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimilaritySearch", reflect.TypeOf((*MockVectorStore)(nil).SimilaritySearch), varargs...)
}
