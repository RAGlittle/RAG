// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rag-gateway/api/embedgw/embedgw.proto

package embedgw

import (
	context "context"
	tei "github.com/Synaptic-Lynx/rag-gateway/api/tei"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EmbedGateway_Info_FullMethodName  = "/embedgw.v1.EmbedGateway/Info"
	EmbedGateway_Embed_FullMethodName = "/embedgw.v1.EmbedGateway/Embed"
)

// EmbedGatewayClient is the client API for EmbedGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmbedGatewayClient interface {
	Info(ctx context.Context, in *tei.InfoRequest, opts ...grpc.CallOption) (*InfoMapResponse, error)
	Embed(ctx context.Context, in *EmbedSpecificRequest, opts ...grpc.CallOption) (*tei.EmbedResponse, error)
}

type embedGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewEmbedGatewayClient(cc grpc.ClientConnInterface) EmbedGatewayClient {
	return &embedGatewayClient{cc}
}

func (c *embedGatewayClient) Info(ctx context.Context, in *tei.InfoRequest, opts ...grpc.CallOption) (*InfoMapResponse, error) {
	out := new(InfoMapResponse)
	err := c.cc.Invoke(ctx, EmbedGateway_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *embedGatewayClient) Embed(ctx context.Context, in *EmbedSpecificRequest, opts ...grpc.CallOption) (*tei.EmbedResponse, error) {
	out := new(tei.EmbedResponse)
	err := c.cc.Invoke(ctx, EmbedGateway_Embed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmbedGatewayServer is the server API for EmbedGateway service.
// All implementations should embed UnimplementedEmbedGatewayServer
// for forward compatibility
type EmbedGatewayServer interface {
	Info(context.Context, *tei.InfoRequest) (*InfoMapResponse, error)
	Embed(context.Context, *EmbedSpecificRequest) (*tei.EmbedResponse, error)
}

// UnimplementedEmbedGatewayServer should be embedded to have forward compatible implementations.
type UnimplementedEmbedGatewayServer struct {
}

func (UnimplementedEmbedGatewayServer) Info(context.Context, *tei.InfoRequest) (*InfoMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedEmbedGatewayServer) Embed(context.Context, *EmbedSpecificRequest) (*tei.EmbedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Embed not implemented")
}

// UnsafeEmbedGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmbedGatewayServer will
// result in compilation errors.
type UnsafeEmbedGatewayServer interface {
	mustEmbedUnimplementedEmbedGatewayServer()
}

func RegisterEmbedGatewayServer(s grpc.ServiceRegistrar, srv EmbedGatewayServer) {
	s.RegisterService(&EmbedGateway_ServiceDesc, srv)
}

func _EmbedGateway_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tei.InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedGatewayServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbedGateway_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedGatewayServer).Info(ctx, req.(*tei.InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmbedGateway_Embed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedSpecificRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmbedGatewayServer).Embed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EmbedGateway_Embed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmbedGatewayServer).Embed(ctx, req.(*EmbedSpecificRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmbedGateway_ServiceDesc is the grpc.ServiceDesc for EmbedGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmbedGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "embedgw.v1.EmbedGateway",
	HandlerType: (*EmbedGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _EmbedGateway_Info_Handler,
		},
		{
			MethodName: "Embed",
			Handler:    _EmbedGateway_Embed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rag-gateway/api/embedgw/embedgw.proto",
}
