// Source : https://github.com/huggingface/text-embeddings-inference/blob/main/proto/tei.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: rag-gateway/api/tei/tei.proto

package tei

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ModelType int32

const (
	ModelType_MODEL_TYPE_EMBEDDING  ModelType = 0
	ModelType_MODEL_TYPE_CLASSIFIER ModelType = 1
	ModelType_MODEL_TYPE_RERANKER   ModelType = 2
)

// Enum value maps for ModelType.
var (
	ModelType_name = map[int32]string{
		0: "MODEL_TYPE_EMBEDDING",
		1: "MODEL_TYPE_CLASSIFIER",
		2: "MODEL_TYPE_RERANKER",
	}
	ModelType_value = map[string]int32{
		"MODEL_TYPE_EMBEDDING":  0,
		"MODEL_TYPE_CLASSIFIER": 1,
		"MODEL_TYPE_RERANKER":   2,
	}
)

func (x ModelType) Enum() *ModelType {
	p := new(ModelType)
	*p = x
	return p
}

func (x ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_rag_gateway_api_tei_tei_proto_enumTypes[0].Descriptor()
}

func (ModelType) Type() protoreflect.EnumType {
	return &file_rag_gateway_api_tei_tei_proto_enumTypes[0]
}

func (x ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ModelType.Descriptor instead.
func (ModelType) EnumDescriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{0}
}

type TruncationDirection int32

const (
	TruncationDirection_TRUNCATION_DIRECTION_RIGHT TruncationDirection = 0
	TruncationDirection_TRUNCATION_DIRECTION_LEFT  TruncationDirection = 1
)

// Enum value maps for TruncationDirection.
var (
	TruncationDirection_name = map[int32]string{
		0: "TRUNCATION_DIRECTION_RIGHT",
		1: "TRUNCATION_DIRECTION_LEFT",
	}
	TruncationDirection_value = map[string]int32{
		"TRUNCATION_DIRECTION_RIGHT": 0,
		"TRUNCATION_DIRECTION_LEFT":  1,
	}
)

func (x TruncationDirection) Enum() *TruncationDirection {
	p := new(TruncationDirection)
	*p = x
	return p
}

func (x TruncationDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TruncationDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_rag_gateway_api_tei_tei_proto_enumTypes[1].Descriptor()
}

func (TruncationDirection) Type() protoreflect.EnumType {
	return &file_rag_gateway_api_tei_tei_proto_enumTypes[1]
}

func (x TruncationDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TruncationDirection.Descriptor instead.
func (TruncationDirection) EnumDescriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{1}
}

type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{0}
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version               string    `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Sha                   *string   `protobuf:"bytes,2,opt,name=sha,proto3,oneof" json:"sha,omitempty"`
	DockerLabel           *string   `protobuf:"bytes,3,opt,name=docker_label,json=dockerLabel,proto3,oneof" json:"docker_label,omitempty"`
	ModelId               string    `protobuf:"bytes,4,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelSha              *string   `protobuf:"bytes,5,opt,name=model_sha,json=modelSha,proto3,oneof" json:"model_sha,omitempty"`
	ModelDtype            string    `protobuf:"bytes,6,opt,name=model_dtype,json=modelDtype,proto3" json:"model_dtype,omitempty"`
	ModelType             ModelType `protobuf:"varint,7,opt,name=model_type,json=modelType,proto3,enum=tei.v1.ModelType" json:"model_type,omitempty"`
	MaxConcurrentRequests uint32    `protobuf:"varint,8,opt,name=max_concurrent_requests,json=maxConcurrentRequests,proto3" json:"max_concurrent_requests,omitempty"`
	MaxInputLength        uint32    `protobuf:"varint,9,opt,name=max_input_length,json=maxInputLength,proto3" json:"max_input_length,omitempty"`
	MaxBatchTokens        uint32    `protobuf:"varint,10,opt,name=max_batch_tokens,json=maxBatchTokens,proto3" json:"max_batch_tokens,omitempty"`
	MaxBatchRequests      *uint32   `protobuf:"varint,11,opt,name=max_batch_requests,json=maxBatchRequests,proto3,oneof" json:"max_batch_requests,omitempty"`
	MaxClientBatchSize    uint32    `protobuf:"varint,12,opt,name=max_client_batch_size,json=maxClientBatchSize,proto3" json:"max_client_batch_size,omitempty"`
	TokenizationWorkers   uint32    `protobuf:"varint,13,opt,name=tokenization_workers,json=tokenizationWorkers,proto3" json:"tokenization_workers,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{1}
}

func (x *InfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoResponse) GetSha() string {
	if x != nil && x.Sha != nil {
		return *x.Sha
	}
	return ""
}

func (x *InfoResponse) GetDockerLabel() string {
	if x != nil && x.DockerLabel != nil {
		return *x.DockerLabel
	}
	return ""
}

func (x *InfoResponse) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *InfoResponse) GetModelSha() string {
	if x != nil && x.ModelSha != nil {
		return *x.ModelSha
	}
	return ""
}

func (x *InfoResponse) GetModelDtype() string {
	if x != nil {
		return x.ModelDtype
	}
	return ""
}

func (x *InfoResponse) GetModelType() ModelType {
	if x != nil {
		return x.ModelType
	}
	return ModelType_MODEL_TYPE_EMBEDDING
}

func (x *InfoResponse) GetMaxConcurrentRequests() uint32 {
	if x != nil {
		return x.MaxConcurrentRequests
	}
	return 0
}

func (x *InfoResponse) GetMaxInputLength() uint32 {
	if x != nil {
		return x.MaxInputLength
	}
	return 0
}

func (x *InfoResponse) GetMaxBatchTokens() uint32 {
	if x != nil {
		return x.MaxBatchTokens
	}
	return 0
}

func (x *InfoResponse) GetMaxBatchRequests() uint32 {
	if x != nil && x.MaxBatchRequests != nil {
		return *x.MaxBatchRequests
	}
	return 0
}

func (x *InfoResponse) GetMaxClientBatchSize() uint32 {
	if x != nil {
		return x.MaxClientBatchSize
	}
	return 0
}

func (x *InfoResponse) GetTokenizationWorkers() uint32 {
	if x != nil {
		return x.TokenizationWorkers
	}
	return 0
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComputeChars       uint32 `protobuf:"varint,1,opt,name=compute_chars,json=computeChars,proto3" json:"compute_chars,omitempty"`
	ComputeTokens      uint32 `protobuf:"varint,2,opt,name=compute_tokens,json=computeTokens,proto3" json:"compute_tokens,omitempty"`
	TotalTimeNs        uint64 `protobuf:"varint,3,opt,name=total_time_ns,json=totalTimeNs,proto3" json:"total_time_ns,omitempty"`
	TokenizationTimeNs uint64 `protobuf:"varint,4,opt,name=tokenization_time_ns,json=tokenizationTimeNs,proto3" json:"tokenization_time_ns,omitempty"`
	QueueTimeNs        uint64 `protobuf:"varint,5,opt,name=queue_time_ns,json=queueTimeNs,proto3" json:"queue_time_ns,omitempty"`
	InferenceTimeNs    uint64 `protobuf:"varint,6,opt,name=inference_time_ns,json=inferenceTimeNs,proto3" json:"inference_time_ns,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetComputeChars() uint32 {
	if x != nil {
		return x.ComputeChars
	}
	return 0
}

func (x *Metadata) GetComputeTokens() uint32 {
	if x != nil {
		return x.ComputeTokens
	}
	return 0
}

func (x *Metadata) GetTotalTimeNs() uint64 {
	if x != nil {
		return x.TotalTimeNs
	}
	return 0
}

func (x *Metadata) GetTokenizationTimeNs() uint64 {
	if x != nil {
		return x.TokenizationTimeNs
	}
	return 0
}

func (x *Metadata) GetQueueTimeNs() uint64 {
	if x != nil {
		return x.QueueTimeNs
	}
	return 0
}

func (x *Metadata) GetInferenceTimeNs() uint64 {
	if x != nil {
		return x.InferenceTimeNs
	}
	return 0
}

type EmbedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs              string              `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Truncate            bool                `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	Normalize           bool                `protobuf:"varint,3,opt,name=normalize,proto3" json:"normalize,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,4,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
	PromptName          *string             `protobuf:"bytes,5,opt,name=prompt_name,json=promptName,proto3,oneof" json:"prompt_name,omitempty"`
}

func (x *EmbedRequest) Reset() {
	*x = EmbedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedRequest) ProtoMessage() {}

func (x *EmbedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedRequest.ProtoReflect.Descriptor instead.
func (*EmbedRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{3}
}

func (x *EmbedRequest) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *EmbedRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *EmbedRequest) GetNormalize() bool {
	if x != nil {
		return x.Normalize
	}
	return false
}

func (x *EmbedRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

func (x *EmbedRequest) GetPromptName() string {
	if x != nil && x.PromptName != nil {
		return *x.PromptName
	}
	return ""
}

type EmbedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embeddings []float32 `protobuf:"fixed32,1,rep,packed,name=embeddings,proto3" json:"embeddings,omitempty"`
	Metadata   *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EmbedResponse) Reset() {
	*x = EmbedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedResponse) ProtoMessage() {}

func (x *EmbedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedResponse.ProtoReflect.Descriptor instead.
func (*EmbedResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{4}
}

func (x *EmbedResponse) GetEmbeddings() []float32 {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

func (x *EmbedResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EmbedSparseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs              string              `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Truncate            bool                `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,3,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
	PromptName          *string             `protobuf:"bytes,4,opt,name=prompt_name,json=promptName,proto3,oneof" json:"prompt_name,omitempty"`
}

func (x *EmbedSparseRequest) Reset() {
	*x = EmbedSparseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedSparseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedSparseRequest) ProtoMessage() {}

func (x *EmbedSparseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedSparseRequest.ProtoReflect.Descriptor instead.
func (*EmbedSparseRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{5}
}

func (x *EmbedSparseRequest) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *EmbedSparseRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *EmbedSparseRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

func (x *EmbedSparseRequest) GetPromptName() string {
	if x != nil && x.PromptName != nil {
		return *x.PromptName
	}
	return ""
}

type SparseValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SparseValue) Reset() {
	*x = SparseValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SparseValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SparseValue) ProtoMessage() {}

func (x *SparseValue) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SparseValue.ProtoReflect.Descriptor instead.
func (*SparseValue) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{6}
}

func (x *SparseValue) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SparseValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type EmbedSparseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SparseEmbeddings []*SparseValue `protobuf:"bytes,1,rep,name=sparse_embeddings,json=sparseEmbeddings,proto3" json:"sparse_embeddings,omitempty"`
	Metadata         *Metadata      `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EmbedSparseResponse) Reset() {
	*x = EmbedSparseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedSparseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedSparseResponse) ProtoMessage() {}

func (x *EmbedSparseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedSparseResponse.ProtoReflect.Descriptor instead.
func (*EmbedSparseResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{7}
}

func (x *EmbedSparseResponse) GetSparseEmbeddings() []*SparseValue {
	if x != nil {
		return x.SparseEmbeddings
	}
	return nil
}

func (x *EmbedSparseResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EmbedAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs              string              `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Truncate            bool                `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,3,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
	PromptName          *string             `protobuf:"bytes,4,opt,name=prompt_name,json=promptName,proto3,oneof" json:"prompt_name,omitempty"`
}

func (x *EmbedAllRequest) Reset() {
	*x = EmbedAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedAllRequest) ProtoMessage() {}

func (x *EmbedAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedAllRequest.ProtoReflect.Descriptor instead.
func (*EmbedAllRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{8}
}

func (x *EmbedAllRequest) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *EmbedAllRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *EmbedAllRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

func (x *EmbedAllRequest) GetPromptName() string {
	if x != nil && x.PromptName != nil {
		return *x.PromptName
	}
	return ""
}

type TokenEmbedding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Embeddings []float32 `protobuf:"fixed32,1,rep,packed,name=embeddings,proto3" json:"embeddings,omitempty"`
}

func (x *TokenEmbedding) Reset() {
	*x = TokenEmbedding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenEmbedding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenEmbedding) ProtoMessage() {}

func (x *TokenEmbedding) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenEmbedding.ProtoReflect.Descriptor instead.
func (*TokenEmbedding) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{9}
}

func (x *TokenEmbedding) GetEmbeddings() []float32 {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

type EmbedAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenEmbeddings []*TokenEmbedding `protobuf:"bytes,1,rep,name=token_embeddings,json=tokenEmbeddings,proto3" json:"token_embeddings,omitempty"`
	Metadata        *Metadata         `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EmbedAllResponse) Reset() {
	*x = EmbedAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbedAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedAllResponse) ProtoMessage() {}

func (x *EmbedAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedAllResponse.ProtoReflect.Descriptor instead.
func (*EmbedAllResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{10}
}

func (x *EmbedAllResponse) GetTokenEmbeddings() []*TokenEmbedding {
	if x != nil {
		return x.TokenEmbeddings
	}
	return nil
}

func (x *EmbedAllResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type PredictRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs              string              `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Truncate            bool                `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	RawScores           bool                `protobuf:"varint,3,opt,name=raw_scores,json=rawScores,proto3" json:"raw_scores,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,4,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
}

func (x *PredictRequest) Reset() {
	*x = PredictRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictRequest) ProtoMessage() {}

func (x *PredictRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictRequest.ProtoReflect.Descriptor instead.
func (*PredictRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{11}
}

func (x *PredictRequest) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *PredictRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *PredictRequest) GetRawScores() bool {
	if x != nil {
		return x.RawScores
	}
	return false
}

func (x *PredictRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

type PredictPairRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs              []string            `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Truncate            bool                `protobuf:"varint,2,opt,name=truncate,proto3" json:"truncate,omitempty"`
	RawScores           bool                `protobuf:"varint,3,opt,name=raw_scores,json=rawScores,proto3" json:"raw_scores,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,4,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
}

func (x *PredictPairRequest) Reset() {
	*x = PredictPairRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictPairRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictPairRequest) ProtoMessage() {}

func (x *PredictPairRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictPairRequest.ProtoReflect.Descriptor instead.
func (*PredictPairRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{12}
}

func (x *PredictPairRequest) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *PredictPairRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *PredictPairRequest) GetRawScores() bool {
	if x != nil {
		return x.RawScores
	}
	return false
}

func (x *PredictPairRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

type Prediction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Score float32 `protobuf:"fixed32,1,opt,name=score,proto3" json:"score,omitempty"`
	Label string  `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *Prediction) Reset() {
	*x = Prediction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prediction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prediction) ProtoMessage() {}

func (x *Prediction) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prediction.ProtoReflect.Descriptor instead.
func (*Prediction) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{13}
}

func (x *Prediction) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Prediction) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type PredictResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Predictions []*Prediction `protobuf:"bytes,1,rep,name=predictions,proto3" json:"predictions,omitempty"`
	Metadata    *Metadata     `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *PredictResponse) Reset() {
	*x = PredictResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResponse) ProtoMessage() {}

func (x *PredictResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResponse.ProtoReflect.Descriptor instead.
func (*PredictResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{14}
}

func (x *PredictResponse) GetPredictions() []*Prediction {
	if x != nil {
		return x.Predictions
	}
	return nil
}

func (x *PredictResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type RerankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query               string              `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Texts               []string            `protobuf:"bytes,2,rep,name=texts,proto3" json:"texts,omitempty"`
	Truncate            bool                `protobuf:"varint,3,opt,name=truncate,proto3" json:"truncate,omitempty"`
	RawScores           bool                `protobuf:"varint,4,opt,name=raw_scores,json=rawScores,proto3" json:"raw_scores,omitempty"`
	ReturnText          bool                `protobuf:"varint,5,opt,name=return_text,json=returnText,proto3" json:"return_text,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,6,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
}

func (x *RerankRequest) Reset() {
	*x = RerankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankRequest) ProtoMessage() {}

func (x *RerankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankRequest.ProtoReflect.Descriptor instead.
func (*RerankRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{15}
}

func (x *RerankRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RerankRequest) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *RerankRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *RerankRequest) GetRawScores() bool {
	if x != nil {
		return x.RawScores
	}
	return false
}

func (x *RerankRequest) GetReturnText() bool {
	if x != nil {
		return x.ReturnText
	}
	return false
}

func (x *RerankRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

type RerankStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query    string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Text     string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Truncate bool   `protobuf:"varint,3,opt,name=truncate,proto3" json:"truncate,omitempty"`
	// The server will only consider the first value
	RawScores bool `protobuf:"varint,4,opt,name=raw_scores,json=rawScores,proto3" json:"raw_scores,omitempty"`
	// The server will only consider the first value
	ReturnText          bool                `protobuf:"varint,5,opt,name=return_text,json=returnText,proto3" json:"return_text,omitempty"`
	TruncationDirection TruncationDirection `protobuf:"varint,6,opt,name=truncation_direction,json=truncationDirection,proto3,enum=tei.v1.TruncationDirection" json:"truncation_direction,omitempty"`
}

func (x *RerankStreamRequest) Reset() {
	*x = RerankStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankStreamRequest) ProtoMessage() {}

func (x *RerankStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankStreamRequest.ProtoReflect.Descriptor instead.
func (*RerankStreamRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{16}
}

func (x *RerankStreamRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *RerankStreamRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *RerankStreamRequest) GetTruncate() bool {
	if x != nil {
		return x.Truncate
	}
	return false
}

func (x *RerankStreamRequest) GetRawScores() bool {
	if x != nil {
		return x.RawScores
	}
	return false
}

func (x *RerankStreamRequest) GetReturnText() bool {
	if x != nil {
		return x.ReturnText
	}
	return false
}

func (x *RerankStreamRequest) GetTruncationDirection() TruncationDirection {
	if x != nil {
		return x.TruncationDirection
	}
	return TruncationDirection_TRUNCATION_DIRECTION_RIGHT
}

type Rank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index uint32  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Text  *string `protobuf:"bytes,2,opt,name=text,proto3,oneof" json:"text,omitempty"`
	Score float32 `protobuf:"fixed32,3,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Rank) Reset() {
	*x = Rank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rank) ProtoMessage() {}

func (x *Rank) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rank.ProtoReflect.Descriptor instead.
func (*Rank) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{17}
}

func (x *Rank) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Rank) GetText() string {
	if x != nil && x.Text != nil {
		return *x.Text
	}
	return ""
}

func (x *Rank) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type RerankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranks    []*Rank   `protobuf:"bytes,1,rep,name=ranks,proto3" json:"ranks,omitempty"`
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *RerankResponse) Reset() {
	*x = RerankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RerankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RerankResponse) ProtoMessage() {}

func (x *RerankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RerankResponse.ProtoReflect.Descriptor instead.
func (*RerankResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{18}
}

func (x *RerankResponse) GetRanks() []*Rank {
	if x != nil {
		return x.Ranks
	}
	return nil
}

func (x *RerankResponse) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type EncodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs           string  `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	AddSpecialTokens bool    `protobuf:"varint,2,opt,name=add_special_tokens,json=addSpecialTokens,proto3" json:"add_special_tokens,omitempty"`
	PromptName       *string `protobuf:"bytes,3,opt,name=prompt_name,json=promptName,proto3,oneof" json:"prompt_name,omitempty"`
}

func (x *EncodeRequest) Reset() {
	*x = EncodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeRequest) ProtoMessage() {}

func (x *EncodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeRequest.ProtoReflect.Descriptor instead.
func (*EncodeRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{19}
}

func (x *EncodeRequest) GetInputs() string {
	if x != nil {
		return x.Inputs
	}
	return ""
}

func (x *EncodeRequest) GetAddSpecialTokens() bool {
	if x != nil {
		return x.AddSpecialTokens
	}
	return false
}

func (x *EncodeRequest) GetPromptName() string {
	if x != nil && x.PromptName != nil {
		return *x.PromptName
	}
	return ""
}

type SimpleToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Text    string  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Special bool    `protobuf:"varint,3,opt,name=special,proto3" json:"special,omitempty"`
	Start   *uint32 `protobuf:"varint,4,opt,name=start,proto3,oneof" json:"start,omitempty"`
	Stop    *uint32 `protobuf:"varint,5,opt,name=stop,proto3,oneof" json:"stop,omitempty"`
}

func (x *SimpleToken) Reset() {
	*x = SimpleToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleToken) ProtoMessage() {}

func (x *SimpleToken) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleToken.ProtoReflect.Descriptor instead.
func (*SimpleToken) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{20}
}

func (x *SimpleToken) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SimpleToken) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SimpleToken) GetSpecial() bool {
	if x != nil {
		return x.Special
	}
	return false
}

func (x *SimpleToken) GetStart() uint32 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *SimpleToken) GetStop() uint32 {
	if x != nil && x.Stop != nil {
		return *x.Stop
	}
	return 0
}

type EncodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []*SimpleToken `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *EncodeResponse) Reset() {
	*x = EncodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeResponse) ProtoMessage() {}

func (x *EncodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeResponse.ProtoReflect.Descriptor instead.
func (*EncodeResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{21}
}

func (x *EncodeResponse) GetTokens() []*SimpleToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type DecodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids               []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	SkipSpecialTokens bool     `protobuf:"varint,2,opt,name=skip_special_tokens,json=skipSpecialTokens,proto3" json:"skip_special_tokens,omitempty"`
}

func (x *DecodeRequest) Reset() {
	*x = DecodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRequest) ProtoMessage() {}

func (x *DecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRequest.ProtoReflect.Descriptor instead.
func (*DecodeRequest) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{22}
}

func (x *DecodeRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *DecodeRequest) GetSkipSpecialTokens() bool {
	if x != nil {
		return x.SkipSpecialTokens
	}
	return false
}

type DecodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *DecodeResponse) Reset() {
	*x = DecodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeResponse) ProtoMessage() {}

func (x *DecodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rag_gateway_api_tei_tei_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeResponse.ProtoReflect.Descriptor instead.
func (*DecodeResponse) Descriptor() ([]byte, []int) {
	return file_rag_gateway_api_tei_tei_proto_rawDescGZIP(), []int{23}
}

func (x *DecodeResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_rag_gateway_api_tei_tei_proto protoreflect.FileDescriptor

var file_rag_gateway_api_tei_tei_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x72, 0x61, 0x67, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x65, 0x69, 0x2f, 0x74, 0x65, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x06, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x22, 0x0d, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xda, 0x04, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x73, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b,
	0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x53, 0x68, 0x61, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x61,
	0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x6d, 0x61, 0x78, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x31, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x73, 0x68, 0x61, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x4e, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x0d, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02,
	0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0b, 0x53,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x45, 0x6d, 0x62, 0x65, 0x64,
	0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x11, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x65, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb,
	0x01, 0x0a, 0x0f, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x0e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x10, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6d, 0x62,
	0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72,
	0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x12, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x61, 0x77, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x38, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x75,
	0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xe7, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x4e, 0x0a, 0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xeb, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x61, 0x77, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a,
	0x14, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x65,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a,
	0x04, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x62, 0x0a, 0x0e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x6e, 0x6b, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x65,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61,
	0x64, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x24, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04,
	0x73, 0x74, 0x6f, 0x70, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x22, 0x3d, 0x0a, 0x0e, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x24, 0x0a, 0x0e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x2a, 0x59, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4d,
	0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x52, 0x41, 0x4e, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x54, 0x0a,
	0x13, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x45, 0x46,
	0x54, 0x10, 0x01, 0x32, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x13, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03,
	0x90, 0x02, 0x02, 0x32, 0x9f, 0x03, 0x0a, 0x05, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x05, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x12, 0x14, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x14, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28,
	0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x53, 0x70, 0x61, 0x72,
	0x73, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x53, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x53, 0x70, 0x61, 0x72, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x1a, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x53, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a,
	0x08, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x74, 0x65, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65,
	0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0e,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x17,
	0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0x9d, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1a, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x16, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x50, 0x61, 0x69, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x74,
	0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x28, 0x01, 0x30, 0x01, 0x32, 0x88, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b,
	0x12, 0x37, 0x0a, 0x06, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x52, 0x65, 0x72,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x65, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x72, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01,
	0x32, 0x86, 0x02, 0x0a, 0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x69, 0x7a, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x37, 0x0a,
	0x06, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x15, 0x2e, 0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x74, 0x65, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x42, 0x15, 0x5a, 0x13, 0x72, 0x61, 0x67,
	0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x65, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rag_gateway_api_tei_tei_proto_rawDescOnce sync.Once
	file_rag_gateway_api_tei_tei_proto_rawDescData = file_rag_gateway_api_tei_tei_proto_rawDesc
)

func file_rag_gateway_api_tei_tei_proto_rawDescGZIP() []byte {
	file_rag_gateway_api_tei_tei_proto_rawDescOnce.Do(func() {
		file_rag_gateway_api_tei_tei_proto_rawDescData = protoimpl.X.CompressGZIP(file_rag_gateway_api_tei_tei_proto_rawDescData)
	})
	return file_rag_gateway_api_tei_tei_proto_rawDescData
}

var file_rag_gateway_api_tei_tei_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rag_gateway_api_tei_tei_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_rag_gateway_api_tei_tei_proto_goTypes = []interface{}{
	(ModelType)(0),              // 0: tei.v1.ModelType
	(TruncationDirection)(0),    // 1: tei.v1.TruncationDirection
	(*InfoRequest)(nil),         // 2: tei.v1.InfoRequest
	(*InfoResponse)(nil),        // 3: tei.v1.InfoResponse
	(*Metadata)(nil),            // 4: tei.v1.Metadata
	(*EmbedRequest)(nil),        // 5: tei.v1.EmbedRequest
	(*EmbedResponse)(nil),       // 6: tei.v1.EmbedResponse
	(*EmbedSparseRequest)(nil),  // 7: tei.v1.EmbedSparseRequest
	(*SparseValue)(nil),         // 8: tei.v1.SparseValue
	(*EmbedSparseResponse)(nil), // 9: tei.v1.EmbedSparseResponse
	(*EmbedAllRequest)(nil),     // 10: tei.v1.EmbedAllRequest
	(*TokenEmbedding)(nil),      // 11: tei.v1.TokenEmbedding
	(*EmbedAllResponse)(nil),    // 12: tei.v1.EmbedAllResponse
	(*PredictRequest)(nil),      // 13: tei.v1.PredictRequest
	(*PredictPairRequest)(nil),  // 14: tei.v1.PredictPairRequest
	(*Prediction)(nil),          // 15: tei.v1.Prediction
	(*PredictResponse)(nil),     // 16: tei.v1.PredictResponse
	(*RerankRequest)(nil),       // 17: tei.v1.RerankRequest
	(*RerankStreamRequest)(nil), // 18: tei.v1.RerankStreamRequest
	(*Rank)(nil),                // 19: tei.v1.Rank
	(*RerankResponse)(nil),      // 20: tei.v1.RerankResponse
	(*EncodeRequest)(nil),       // 21: tei.v1.EncodeRequest
	(*SimpleToken)(nil),         // 22: tei.v1.SimpleToken
	(*EncodeResponse)(nil),      // 23: tei.v1.EncodeResponse
	(*DecodeRequest)(nil),       // 24: tei.v1.DecodeRequest
	(*DecodeResponse)(nil),      // 25: tei.v1.DecodeResponse
}
var file_rag_gateway_api_tei_tei_proto_depIdxs = []int32{
	0,  // 0: tei.v1.InfoResponse.model_type:type_name -> tei.v1.ModelType
	1,  // 1: tei.v1.EmbedRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	4,  // 2: tei.v1.EmbedResponse.metadata:type_name -> tei.v1.Metadata
	1,  // 3: tei.v1.EmbedSparseRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	8,  // 4: tei.v1.EmbedSparseResponse.sparse_embeddings:type_name -> tei.v1.SparseValue
	4,  // 5: tei.v1.EmbedSparseResponse.metadata:type_name -> tei.v1.Metadata
	1,  // 6: tei.v1.EmbedAllRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	11, // 7: tei.v1.EmbedAllResponse.token_embeddings:type_name -> tei.v1.TokenEmbedding
	4,  // 8: tei.v1.EmbedAllResponse.metadata:type_name -> tei.v1.Metadata
	1,  // 9: tei.v1.PredictRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	1,  // 10: tei.v1.PredictPairRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	15, // 11: tei.v1.PredictResponse.predictions:type_name -> tei.v1.Prediction
	4,  // 12: tei.v1.PredictResponse.metadata:type_name -> tei.v1.Metadata
	1,  // 13: tei.v1.RerankRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	1,  // 14: tei.v1.RerankStreamRequest.truncation_direction:type_name -> tei.v1.TruncationDirection
	19, // 15: tei.v1.RerankResponse.ranks:type_name -> tei.v1.Rank
	4,  // 16: tei.v1.RerankResponse.metadata:type_name -> tei.v1.Metadata
	22, // 17: tei.v1.EncodeResponse.tokens:type_name -> tei.v1.SimpleToken
	2,  // 18: tei.v1.Info.Info:input_type -> tei.v1.InfoRequest
	5,  // 19: tei.v1.Embed.Embed:input_type -> tei.v1.EmbedRequest
	5,  // 20: tei.v1.Embed.EmbedStream:input_type -> tei.v1.EmbedRequest
	7,  // 21: tei.v1.Embed.EmbedSparse:input_type -> tei.v1.EmbedSparseRequest
	7,  // 22: tei.v1.Embed.EmbedSparseStream:input_type -> tei.v1.EmbedSparseRequest
	10, // 23: tei.v1.Embed.EmbedAll:input_type -> tei.v1.EmbedAllRequest
	10, // 24: tei.v1.Embed.EmbedAllStream:input_type -> tei.v1.EmbedAllRequest
	13, // 25: tei.v1.Predict.Predict:input_type -> tei.v1.PredictRequest
	14, // 26: tei.v1.Predict.PredictPair:input_type -> tei.v1.PredictPairRequest
	13, // 27: tei.v1.Predict.PredictStream:input_type -> tei.v1.PredictRequest
	14, // 28: tei.v1.Predict.PredictPairStream:input_type -> tei.v1.PredictPairRequest
	17, // 29: tei.v1.Rerank.Rerank:input_type -> tei.v1.RerankRequest
	18, // 30: tei.v1.Rerank.RerankStream:input_type -> tei.v1.RerankStreamRequest
	21, // 31: tei.v1.Tokenize.Tokenize:input_type -> tei.v1.EncodeRequest
	21, // 32: tei.v1.Tokenize.TokenizeStream:input_type -> tei.v1.EncodeRequest
	24, // 33: tei.v1.Tokenize.Decode:input_type -> tei.v1.DecodeRequest
	24, // 34: tei.v1.Tokenize.DecodeStream:input_type -> tei.v1.DecodeRequest
	3,  // 35: tei.v1.Info.Info:output_type -> tei.v1.InfoResponse
	6,  // 36: tei.v1.Embed.Embed:output_type -> tei.v1.EmbedResponse
	6,  // 37: tei.v1.Embed.EmbedStream:output_type -> tei.v1.EmbedResponse
	9,  // 38: tei.v1.Embed.EmbedSparse:output_type -> tei.v1.EmbedSparseResponse
	9,  // 39: tei.v1.Embed.EmbedSparseStream:output_type -> tei.v1.EmbedSparseResponse
	12, // 40: tei.v1.Embed.EmbedAll:output_type -> tei.v1.EmbedAllResponse
	12, // 41: tei.v1.Embed.EmbedAllStream:output_type -> tei.v1.EmbedAllResponse
	16, // 42: tei.v1.Predict.Predict:output_type -> tei.v1.PredictResponse
	16, // 43: tei.v1.Predict.PredictPair:output_type -> tei.v1.PredictResponse
	16, // 44: tei.v1.Predict.PredictStream:output_type -> tei.v1.PredictResponse
	16, // 45: tei.v1.Predict.PredictPairStream:output_type -> tei.v1.PredictResponse
	20, // 46: tei.v1.Rerank.Rerank:output_type -> tei.v1.RerankResponse
	20, // 47: tei.v1.Rerank.RerankStream:output_type -> tei.v1.RerankResponse
	23, // 48: tei.v1.Tokenize.Tokenize:output_type -> tei.v1.EncodeResponse
	23, // 49: tei.v1.Tokenize.TokenizeStream:output_type -> tei.v1.EncodeResponse
	25, // 50: tei.v1.Tokenize.Decode:output_type -> tei.v1.DecodeResponse
	25, // 51: tei.v1.Tokenize.DecodeStream:output_type -> tei.v1.DecodeResponse
	35, // [35:52] is the sub-list for method output_type
	18, // [18:35] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_rag_gateway_api_tei_tei_proto_init() }
func file_rag_gateway_api_tei_tei_proto_init() {
	if File_rag_gateway_api_tei_tei_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rag_gateway_api_tei_tei_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedSparseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SparseValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedSparseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenEmbedding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbedAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictPairRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prediction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RerankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rag_gateway_api_tei_tei_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_rag_gateway_api_tei_tei_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_rag_gateway_api_tei_tei_proto_msgTypes[20].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rag_gateway_api_tei_tei_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_rag_gateway_api_tei_tei_proto_goTypes,
		DependencyIndexes: file_rag_gateway_api_tei_tei_proto_depIdxs,
		EnumInfos:         file_rag_gateway_api_tei_tei_proto_enumTypes,
		MessageInfos:      file_rag_gateway_api_tei_tei_proto_msgTypes,
	}.Build()
	File_rag_gateway_api_tei_tei_proto = out.File
	file_rag_gateway_api_tei_tei_proto_rawDesc = nil
	file_rag_gateway_api_tei_tei_proto_goTypes = nil
	file_rag_gateway_api_tei_tei_proto_depIdxs = nil
}
